public class Testcase extends java.lang.Object
{
    private int counter;

    public void <init>()
    {
        Testcase r0;

        r0 := @this: Testcase;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        r0.<Testcase: int counter> = 0;
        return;
    }

    public void WhileTest()
    {
        Testcase r0;
        int $i0, $i1, $i2, $i3, c0;
        java.io.PrintStream $r2;
        java.lang.StringBuilder $r3, $r4;
        java.lang.String $r5;

        r0 := @this: Testcase;
        c0 = 0;
        r0.<Testcase: int counter> = 0;
        goto label1;

     label0:
        $i0 = r0.<Testcase: int counter>;
        $i1 = $i0 + 1;
        c0 = c0 + 1;
        r0.<Testcase: int counter> = $i1;

     label1:
        $i2 = r0.<Testcase: int counter>;
        if $i2 < 6 goto label0;

        $r2 = <java.lang.System: java.io.PrintStream out>;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("WhileTest ");
        $i3 = r0.<Testcase: int counter>;
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r5);
        return;
    }

    public void DoWhileTest()
    {
        Testcase r0;
        int $i0, $i1, $i2, $i3, c1;
        java.io.PrintStream $r2;
        java.lang.StringBuilder $r3, $r4;
        java.lang.String $r5;

        r0 := @this: Testcase;
        c1 = 0;
        r0.<Testcase: int counter> = 0;

     label0:
        $i0 = r0.<Testcase: int counter>;
        $i1 = $i0 + 1;
        r0.<Testcase: int counter> = $i1;
        $i2 = r0.<Testcase: int counter>;
        c1 = c1 + 1;
        if $i2 < 6 goto label0;

        $r2 = <java.lang.System: java.io.PrintStream out>;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("DoWhileTest ");
        $i3 = r0.<Testcase: int counter>;
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r5);
        return;
    }

    public void ForTest()
    {
        Testcase r0;
        int i0, $i1, $i2, $i3, c2;
        java.io.PrintStream $r2;
        java.lang.StringBuilder $r3, $r4;
        java.lang.String $r5;

        r0 := @this: Testcase;
        c2 = 0;
        r0.<Testcase: int counter> = 0;
        i0 = 0;
        goto label1;

     label0:
        $i1 = r0.<Testcase: int counter>;
        $i2 = $i1 + 1;
        r0.<Testcase: int counter> = $i2;
        c2 = c2 + 1;
        i0 = i0 + 1;

     label1:
        if i0 < 6 goto label0;

        $r2 = <java.lang.System: java.io.PrintStream out>;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("ForTest ");
        $i3 = r0.<Testcase: int counter>;
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r5);
        return;
    }

    public void NestedLoopTest()
    {
        Testcase r0;
        int i0, i1, $i2, $i3, $i4, c3, c4;
        java.io.PrintStream $r2;
        java.lang.StringBuilder $r3, $r4;
        java.lang.String $r5;

        r0 := @this: Testcase;
        c4 = 0;
        c3 = 0;
        r0.<Testcase: int counter> = 0;
        i0 = 0;
        goto label3;

     label0:
        i1 = 0;
        goto label2;

     label1:
        $i2 = r0.<Testcase: int counter>;
        $i3 = $i2 + 1;
        r0.<Testcase: int counter> = $i3;
        c3 = c3 + 1;
        i1 = i1 + 1;

     label2:
        if i1 < 2 goto label1;

        c4 = c4 + 1;
        i0 = i0 + 1;

     label3:
        if i0 < 3 goto label0;

        $r2 = <java.lang.System: java.io.PrintStream out>;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("NestedLoopTest ");
        $i4 = r0.<Testcase: int counter>;
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r5);
        return;
    }

    public void Callee()
    {
        Testcase r0;
        java.io.PrintStream $r1;

        r0 := @this: Testcase;
        $r1 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("I\'m callee.");
        return;
    }

    public void Caller()
    {
        Testcase r0;
        java.io.PrintStream $r1;

        r0 := @this: Testcase;
        $r1 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("I\'m caller.");
        virtualinvoke r0.<Testcase: void Callee()>();
        return;
    }

    public int ReturnTest()
    {
        Testcase r0;
        int $i0;

        r0 := @this: Testcase;
        r0.<Testcase: int counter> = 6;
        $i0 = r0.<Testcase: int counter>;
        return $i0;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        Testcase $r1, r2;
        int i0;
        java.io.PrintStream $r3;
        java.lang.StringBuilder $r4, $r5;
        java.lang.String $r6;

        r0 := @parameter0: java.lang.String[];
        $r1 = new Testcase;
        specialinvoke $r1.<Testcase: void <init>()>();
        r2 = $r1;
        virtualinvoke r2.<Testcase: void WhileTest()>();
        virtualinvoke r2.<Testcase: void DoWhileTest()>();
        virtualinvoke r2.<Testcase: void ForTest()>();
        virtualinvoke r2.<Testcase: void NestedLoopTest()>();
        virtualinvoke r2.<Testcase: void Caller()>();
        i0 = virtualinvoke r2.<Testcase: int ReturnTest()>();
        staticinvoke <edu.gatech.util.innerFeature: void addFeature(int)>(i0);
        $r3 = <java.lang.System: java.io.PrintStream out>;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("ReturnTest ");
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r6);
        return;
    }
}
public class edu.gatech.util.innerClass extends java.lang.Object
{

    public void <init>()
    {
        edu.gatech.util.innerClass r0;

        r0 := @this: edu.gatech.util.innerClass;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static void test()
    {
        java.io.PrintStream $r0;

        $r0 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("testing");
        return;
    }
}
public class edu.gatech.util.innerFeature extends java.lang.Object
{
    static int counter;
    public static java.util.Map allFeatures;

    static void <clinit>()
    {
        java.util.HashMap $r0;

        <edu.gatech.util.innerFeature: int counter> = 0;
        $r0 = new java.util.HashMap;
        specialinvoke $r0.<java.util.HashMap: void <init>()>();
        <edu.gatech.util.innerFeature: java.util.Map allFeatures> = $r0;
        return;
    }

    public void <init>()
    {
        edu.gatech.util.innerFeature r0;

        r0 := @this: edu.gatech.util.innerFeature;
        specialinvoke r0.<java.lang.Object: void <init>()>();
        return;
    }

    public static void addFeature(java.lang.String)
    {
        java.lang.String r0, $r4;
        java.io.PrintStream $r1;
        java.lang.StringBuilder $r2, $r3;
        java.util.Map $r5;
        java.lang.Integer $r6;

        r0 := @parameter0: java.lang.String;
        $r1 = <java.lang.System: java.io.PrintStream out>;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Addfeature ");
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r4);
        $r5 = <edu.gatech.util.innerFeature: java.util.Map allFeatures>;
        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r6);
        return;
    }

    public static void addFeature(int)
    {
        int i0;
        java.util.Map $r0;
        java.lang.Integer $r1;

        i0 := @parameter0: int;
        $r0 = <edu.gatech.util.innerFeature: java.util.Map allFeatures>;
        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, $r1);
        return;
    }

    public static void addFeature(java.lang.String, int)
    {
        java.lang.String r0, $r4;
        int i0;
        java.io.PrintStream $r1;
        java.lang.StringBuilder $r2, $r3;
        java.util.Map $r5;
        java.lang.Integer $r6;

        r0 := @parameter0: java.lang.String;
        i0 := @parameter1: int;
        $r1 = <java.lang.System: java.io.PrintStream out>;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Addfeature ");
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r4);
        $r5 = <edu.gatech.util.innerFeature: java.util.Map allFeatures>;
        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);
        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r6);
        return;
    }

    public static java.lang.String getNextName()
    {
        java.lang.StringBuilder $r0, $r1;
        int $i0, $i1;
        java.lang.String $r2;

        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("c");
        $i0 = <edu.gatech.util.innerFeature: int counter>;
        $i1 = $i0 + 1;
        <edu.gatech.util.innerFeature: int counter> = $i1;
        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r2;
    }

    public static void testPrint()
    {
        java.util.Map $r0;
        java.util.Iterator r1;
        java.util.Map$Entry r2;
        java.lang.StringBuilder $r3, $r8, $r9, $r11;
        java.util.Set $r4;
        java.lang.Object $r5, $r7, $r10;
        java.io.PrintStream $r6;
        java.lang.String $r12;
        boolean $z0;
        int c5;

        $r0 = <edu.gatech.util.innerFeature: java.util.Map allFeatures>;
        c5 = 0;
        $r4 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();
        r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();
        goto label1;

     label0:
        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();
        r2 = (java.util.Map$Entry) $r5;
        $r6 = <java.lang.System: java.io.PrintStream out>;
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r7 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();
        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);
        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");
        $r10 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();
        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);
        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();
        c5 = c5 + 1;
        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r12);

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();
        if $z0 != 0 goto label0;

        return;
    }
}
