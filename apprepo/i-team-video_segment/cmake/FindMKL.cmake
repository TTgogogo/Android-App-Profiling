
if (MKL_INCLUDES AND MKL_LIBRARIES)
  set(CBLAS_FIND_QUIETLY TRUE)
endif (MKL_INCLUDES AND MKL_LIBRARIES)

FILE(GLOB MKL_TEST_INCLUDE_PATH_0 "/opt/intel/Compiler/*/*/Frameworks/mkl/include")
FILE(GLOB MKL_TEST_LIBRARY_PATH_0 "/opt/intel/Compiler/*/*/Frameworks/mkl/lib")

find_path(MKL_INCLUDES
  NAMES
  mkl_blas.h
  PATHS
  $ENV{MKLDIR}/include
  ${MKL_TEST_INCLUDE_PATH_0}
  ${INCLUDE_INSTALL_DIR}
)

if(${CMAKE_HOST_SYSTEM_PROCESSOR} STREQUAL "x86_64")

# 64 bit case.
set(MKL_LIBRARY_PATHS
	$ENV{MKLLIB}
	/opt/intel/mkl/*/lib/em64t
  	${MKL_TEST_LIBRARY_PATH_0}/em64t
  	${LIB_INSTALL_DIR}
)

list(FIND CMAKE_FIND_LIBRARY_SUFFIXES .dylib DYLIB_SUFFIX_PRESENT)

if (NOT DYLIB_SUFFIX_PRESENT EQUAL -1) 
  list(REMOVE_AT CMAKE_FIND_LIBRARY_SUFFIXES ${DYLIB_SUFFIX_PRESENT})
endif (NOT DYLIB_SUFFIX_PRESENT EQUAL -1)

find_library(MKL_CORE 		mkl_core 	PATHS ${MKL_LIBRARY_PATHS})
find_library(MKL_INTEL 		mkl_intel_lp64 	PATHS ${MKL_LIBRARY_PATHS})
find_library(MKL_SEQUENTIAL	mkl_sequential  PATHS ${MKL_LIBRARY_PATHS})

set(MKL_LIBRARIES ${MKL_CORE} ${MKL_INTEL} ${MKL_SEQUENTIAL} pthread)

if (NOT DYLIB_SUFFIX_PRESENT EQUAL -1)
  list(INSERT CMAKE_FIND_LIBRARY_SUFFIXES ${DYLIB_SUFFIX_PRESENT} ".dylib")
endif (NOT DYLIB_SUFFIX_PRESENT EQUAL -1)

else(${CMAKE_HOST_SYSTEM_PROCESSOR} STREQUAL "x86_64")

# 32 bit case.
set(MKL_LIBRARY_PATHS
	$ENV{MKLLIB}
	/opt/intel/mkl/*/lib/32
  	${MKL_TEST_LIBRARY_PATH_0}/32
  	${LIB_INSTALL_DIR}
)

# Force static binding on OSX
list(FIND CMAKE_FIND_LIBRARY_SUFFIXES .dylib DYLIB_SUFFIX_PRESENT)

if (NOT DYLIB_SUFFIX_PRESENT EQUAL -1) 
  list(REMOVE_AT CMAKE_FIND_LIBRARY_SUFFIXES ${DYLIB_SUFFIX_PRESENT})
endif (NOT DYLIB_SUFFIX_PRESENT EQUAL -1)

find_library(MKL_CORE 		mkl_core 	PATHS ${MKL_LIBRARY_PATHS})
find_library(MKL_INTEL 		mkl_intel 	PATHS ${MKL_LIBRARY_PATHS})
find_library(MKL_SEQUENTIAL	mkl_sequential  PATHS ${MKL_LIBRARY_PATHS})

set(MKL_LIBRARIES ${MKL_CORE} ${MKL_INTEL} ${MKL_SEQUENTIAL} pthread)

if (NOT DYLIB_SUFFIX_PRESENT EQUAL -1)
  list(INSERT CMAKE_FIND_LIBRARY_SUFFIXES ${DYLIB_SUFFIX_PRESENT} ".dylib")
endif (NOT DYLIB_SUFFIX_PRESENT EQUAL -1)

endif(${CMAKE_HOST_SYSTEM_PROCESSOR} STREQUAL "x86_64")

IF(MKL_LIBRARIES AND MKL_INCLUDES)
  SET(MKL_FOUND TRUE)
  SET(MKL_INCLUDE_DIR ${MKL_INCLUDES})
ENDIF(MKL_LIBRARIES AND MKL_INCLUDES)

IF(NOT MKL_FOUND)
  # make FIND_PACKAGE friendly
  IF(MKL_FIND_REQUIRED)
    MESSAGE(FATAL_ERROR
            "MKL required but some headers or libs not found.")
  ELSE(MKL_FIND_REQUIRED)
    MESSAGE(STATUS 
            "ERROR: MKL was not found.")
  ENDIF(MKL_FIND_REQUIRED)
ELSE(NOT MKL_FOUND)
  MESSAGE(STATUS
          "MKL found at ${MKL_INCLUDE_DIR}. MKL Libraries: ${MKL_LIBRARIES}")
ENDIF(NOT MKL_FOUND)


mark_as_advanced(MKL_INCLUDES MKL_INCLUDE_DIR MKL_LIBRARIES)

