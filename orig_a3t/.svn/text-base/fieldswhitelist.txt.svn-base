<android.app.ActivityThread$ProviderClientRecord: android.content.ContentProvider mLocalProvider>
<android.app.ActivityThread$ProviderClientRecord: android.content.IContentProvider mProvider>
<android.app.ActivityThread$ProviderClientRecord: java.lang.String mName>
<android.app.ActivityThread$ProviderRefCount: int count>
<android.app.ContextImpl$ApplicationContentResolver: android.app.ActivityThread mMainThread>
<android.app.ContextImpl: android.app.ActivityThread mMainThread>
<android.app.ContextImpl: android.app.LoadedApk mPackageInfo>
<android.app.ContextImpl: android.content.Context mOuterContext>
<android.app.ContextImpl: android.content.res.Resources mResources>
<android.app.ContextImpl: android.content.res.Resources$Theme mTheme>
<android.app.ContextImpl: android.media.AudioManager mAudioManager>
<android.app.ContextImpl: android.view.LayoutInflater mLayoutInflater>
<android.app.ContextImpl: int mThemeResource>
<android.app.ContextImpl: java.lang.Object mSync>
<android.app.Dialog$1: android.app.Dialog this$0>
<android.app.Dialog: android.view.View mDecor>
<android.app.Dialog: android.view.Window mWindow>
<android.app.Dialog: android.view.WindowManager mWindowManager>
<android.app.Dialog: boolean mCancelable>
<android.app.Dialog: boolean mCanceledOnTouchOutside>
<android.app.Dialog: boolean mShowing>
<android.app.Dialog: java.lang.Runnable mDismissAction>
<android.app.Dialog: java.lang.Thread mUiThread>
<android.app.INotificationManager$Stub$Proxy: android.os.IBinder mRemote>
<android.app.NotificationManager: android.content.Context mContext>
<android.app.Service: android.app.IActivityManager mActivityManager>
<android.app.Service: android.os.IBinder mToken>
<android.app.Service: java.lang.String mClassName>
<android.content.ContentProviderProxy: android.os.IBinder mRemote>
<android.content.ContentResolver$CursorWrapperInner: android.content.ContentResolver this$0>
<android.content.ContentResolver$CursorWrapperInner: android.content.IContentProvider mContentProvider>
<android.content.ContentResolver$CursorWrapperInner: boolean mCloseFlag>
<android.content.ContextWrapper: android.content.Context mBase>
<android.content.res.AssetManager$AssetInputStream: android.content.res.AssetManager this$0>
<android.content.res.AssetManager$AssetInputStream: int mAsset>
<android.content.res.AssetManager: int mNumRefs>
<android.content.res.Resources$Theme: android.content.res.AssetManager mAssets>
<android.content.res.Resources$Theme: android.content.res.Resources this$0>
<android.content.res.Resources$Theme: int mTheme>
<android.content.res.Resources: android.content.res.TypedArray mCachedStyledAttributes>
<android.content.res.Resources: int mLastCachedXmlBlockIndex>
<android.content.res.StringBlock: java.lang.CharSequence[] mStrings>
<android.content.res.TypedArray: android.content.res.Resources mResources>
<android.content.res.TypedArray: android.util.TypedValue mValue>
<android.content.res.TypedArray: int[] mData>
<android.content.res.TypedArray: int[] mIndices>
<android.content.res.XmlBlock$Parser: android.content.res.XmlBlock mBlock>
<android.content.res.XmlBlock$Parser: int mParseState>
<android.content.res.XmlBlock: android.content.res.StringBlock mStrings>
<android.content.res.XmlBlock: int mNative>
<android.content.res.XmlBlock: int mOpenCount>
<android.drm.mobile1.DrmConstraintInfo: int count>
<android.drm.mobile1.DrmConstraintInfo: long endDate>
<android.drm.mobile1.DrmConstraintInfo: long interval>
<android.drm.mobile1.DrmRawContent$DrmInputStream: byte[] b>
<android.drm.mobile1.DrmRawContent: int id>
<android.drm.mobile1.DrmRawContent: int inDataLen>
<android.drm.mobile1.DrmRawContent: int rawType>
<android.drm.mobile1.DrmRawContent: java.lang.String mediaType>
<android.drm.mobile1.DrmRawContent: java.lang.String rightsIssuer>
<android.drm.mobile1.DrmRights: java.lang.String roId>
<android.drm.mobile1.DrmRightsManager: android.drm.mobile1.DrmRightsManager singleton>
<android.graphics.Bitmap: android.graphics.Matrix sScaleMatrix>
<android.graphics.Bitmap: int mDensity>
<android.graphics.Bitmap: int mHeight>
<android.graphics.Bitmap: int mNativeBitmap>
<android.graphics.Bitmap: int mWidth>
<android.graphics.Bitmap: int sDefaultDensity>
<android.graphics.Canvas: int mNativeCanvas>
<android.graphics.Interpolator: int native_instance>
<android.graphics.Matrix: int native_instance>
<android.graphics.NinePatch: android.graphics.Bitmap mBitmap>
<android.graphics.NinePatch: byte[] mChunk>
<android.graphics.Paint$FontMetricsInt: int ascent>
<android.graphics.Paint$FontMetricsInt: int bottom>
<android.graphics.Paint$FontMetricsInt: int descent>
<android.graphics.Paint$FontMetricsInt: int top>
<android.graphics.Paint: boolean mHasCompatScaling>
<android.graphics.Paint: float mCompatScaling>
<android.graphics.Paint: float mInvCompatScaling>
<android.graphics.Paint: int mNativePaint>
<android.graphics.Rect: int bottom>
<android.graphics.Rect: int left>
<android.graphics.Rect: int right>
<android.graphics.Rect: int top>
<android.graphics.Region: int mNativeRegion>
<android.graphics.Shader: int native_instance>
<android.graphics.Xfermode: int native_instance>
<android.graphics.drawable.BitmapDrawable: boolean mApplyGravity>
<android.graphics.drawable.ColorDrawable$ColorState: int mBaseColor>
<android.graphics.drawable.ColorDrawable$ColorState: int mUseColor>
<android.graphics.drawable.ColorDrawable: android.graphics.drawable.ColorDrawable$ColorState mState>
<android.graphics.drawable.Drawable: android.graphics.Rect mBounds>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback mCallback>
<android.graphics.drawable.Drawable: boolean mVisible>
<android.graphics.drawable.Drawable: int mChangingConfigurations>
<android.graphics.drawable.Drawable: int mLevel>
<android.graphics.drawable.Drawable: int[] mStateSet>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.Rect mConstantPadding>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.drawable.Drawable[] mDrawables>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: boolean mComputedConstantSize>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: boolean mConstantSize>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: boolean mDither>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: boolean mHaveOpacity>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: boolean mHaveStateful>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: boolean mStateful>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: boolean mVariablePadding>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int mChangingConfigurations>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int mChildrenChangingConfigurations>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int mConstantHeight>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int mConstantWidth>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int mNumChildren>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int mOpacity>
<android.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable mCurrDrawable>
<android.graphics.drawable.DrawableContainer: android.graphics.drawable.DrawableContainer$DrawableContainerState mDrawableContainerState>
<android.graphics.drawable.DrawableContainer: int mAlpha>
<android.graphics.drawable.DrawableContainer: int mCurIndex>
<android.graphics.drawable.NinePatchDrawable$NinePatchState: android.graphics.NinePatch mNinePatch>
<android.graphics.drawable.NinePatchDrawable$NinePatchState: android.graphics.Rect mPadding>
<android.graphics.drawable.NinePatchDrawable$NinePatchState: boolean mDither>
<android.graphics.drawable.NinePatchDrawable: android.graphics.NinePatch mNinePatch>
<android.graphics.drawable.NinePatchDrawable: android.graphics.Paint mPaint>
<android.graphics.drawable.NinePatchDrawable: android.graphics.drawable.NinePatchDrawable$NinePatchState mNinePatchState>
<android.graphics.drawable.StateListDrawable$StateListState: int[][] mStateSets>
<android.graphics.drawable.StateListDrawable: android.graphics.drawable.StateListDrawable$StateListState mStateListState>
<android.media.AudioManager: android.content.Context mContext>
<android.media.AudioManager: android.media.IAudioFocusDispatcher mAudioFocusDispatcher>
<android.media.AudioManager: android.media.IAudioService sService>
<android.media.AudioManager: android.os.IBinder mICallBack>
<android.media.AudioManager: java.lang.Object mFocusListenerLock>
<android.media.AudioManager: java.util.HashMap mAudioFocusIdListenerMap>
<android.media.IAudioService$Stub$Proxy: android.os.IBinder mRemote>
<android.media.MediaPlayer$EventHandler: android.media.MediaPlayer mMediaPlayer>
<android.media.MediaPlayer$EventHandler: android.media.MediaPlayer this$0>
<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler>
<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>
<android.net.DhcpInfo: int ipAddress>
<android.net.IThrottleManager$Stub$Proxy: android.os.IBinder mRemote>
<android.net.InterfaceConfiguration: int ipAddr>
<android.net.InterfaceConfiguration: int netmask>
<android.net.InterfaceConfiguration: java.lang.String interfaceFlags>
<android.net.LocalSocketImpl$SocketOutputStream: android.net.LocalSocketImpl this$0>
<android.net.LocalSocketImpl: android.net.LocalSocketImpl$SocketInputStream fis>
<android.net.LocalSocketImpl: android.net.LocalSocketImpl$SocketOutputStream fos>
<android.net.LocalSocketImpl: java.io.FileDescriptor[] inboundFileDescriptors>
<android.net.LocalSocketImpl: java.io.FileDescriptor[] outboundFileDescriptors>
<android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTED>
<android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState DISCONNECTED>
<android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState DISCONNECTING>
<android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState FAILED>
<android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState IDLE>
<android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState OBTAINING_IPADDR>
<android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState SCANNING>
<android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState SUSPENDED>
<android.net.NetworkInfo$State: android.net.NetworkInfo$State CONNECTED>
<android.net.NetworkInfo$State: android.net.NetworkInfo$State CONNECTING>
<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState mDetailedState>
<android.net.NetworkInfo: android.net.NetworkInfo$State mState>
<android.net.NetworkInfo: android.os.Parcelable$Creator CREATOR>
<android.net.NetworkInfo: boolean mIsAvailable>
<android.net.NetworkInfo: boolean mIsFailover>
<android.net.NetworkInfo: boolean mIsRoaming>
<android.net.NetworkInfo: int mNetworkType>
<android.net.NetworkInfo: int mSubtype>
<android.net.NetworkInfo: java.lang.String mExtraInfo>
<android.net.NetworkInfo: java.lang.String mSubtypeName>
<android.net.NetworkInfo: java.lang.String mTypeName>
<android.net.SSLCertificateSocketFactory: int mHandshakeTimeoutMillis>
<android.net.SSLCertificateSocketFactory: javax.net.ssl.HostnameVerifier HOSTNAME_VERIFIER>
<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mInsecureFactory>
<android.net.SSLCertificateSocketFactory: javax.net.ssl.TrustManager[] INSECURE_TRUST_MANAGER>
<android.net.SSLCertificateSocketFactory: org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache mSessionCache>
<android.net.SSLSessionCache: org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache mSessionCache>
<android.net.SntpClient: long mNtpTimeReference>
<android.net.SntpClient: long mRoundTripTime>
<android.net.Uri$AbstractHierarchicalUri: android.net.Uri$Part userInfo>
<android.net.Uri$AbstractPart: java.lang.String decoded>
<android.net.Uri$AbstractPart: java.lang.String encoded>
<android.net.Uri$OpaqueUri: android.net.Uri$Part ssp>
<android.net.Uri$OpaqueUri: java.lang.String cachedString>
<android.net.Uri$OpaqueUri: java.lang.String scheme>
<android.net.Uri$PathSegments: android.net.Uri$PathSegments EMPTY>
<android.net.Uri$PathSegments: int size>
<android.net.Uri$PathSegments: java.lang.String[] segments>
<android.net.Uri$PathSegmentsBuilder: int size>
<android.net.Uri$PathSegmentsBuilder: java.lang.String[] segments>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int MIN_SCRIPT_PREFIX_LENGTH>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: int mFlags>
<android.net.WebAddress: java.lang.String mScheme>
<android.net.WebAddress: java.util.regex.Pattern sAddressPattern>
<android.net.http.CertificateValidatorCache$CacheEntry: android.net.http.CertificateValidatorCache this$0>
<android.net.http.CertificateValidatorCache$CacheEntry: byte[] mHash>
<android.net.http.CertificateValidatorCache$CacheEntry: java.lang.String mDomain>
<android.net.http.CertificateValidatorCache$CacheEntry: long mSave>
<android.net.http.CertificateValidatorCache$CacheEntry: long mTime>
<android.net.http.CertificateValidatorCache: int mBigScrew>
<android.net.http.CertificateValidatorCache: java.util.HashMap mCacheMap>
<android.net.http.CertificateValidatorCache: long mCost>
<android.net.http.CertificateValidatorCache: long mSave>
<android.net.http.Connection: android.net.http.SslCertificate mCertificate>
<android.net.http.Connection: org.apache.http.HttpHost mHost>
<android.net.http.Headers: int connectionType>
<android.net.http.Headers: java.lang.String[] sHeaderNames>
<android.net.http.Headers: java.util.ArrayList mExtraHeaderValues>
<android.net.http.Headers: long contentLength>
<android.net.http.Headers: long transferEncoding>
<android.net.http.Request: org.apache.http.HttpHost mHost>
<android.net.http.Request: org.apache.http.HttpHost mProxyHost>
<android.net.http.RequestQueue$1: android.net.http.RequestQueue this$0>
<android.net.http.RequestQueue: android.content.BroadcastReceiver mProxyChangeReceiver>
<android.net.http.RequestQueue: android.net.ConnectivityManager mConnectivityManager>
<android.net.http.RequestQueue: java.util.LinkedHashMap mPending>
<android.net.http.RequestQueue: org.apache.http.HttpHost mProxyHost>
<android.net.wifi.IWifiManager$Stub$Proxy: android.os.IBinder mRemote>
<android.net.wifi.WifiManager$WifiLock: android.net.wifi.WifiManager this$0>
<android.net.wifi.WifiManager$WifiLock: android.os.IBinder mBinder>
<android.net.wifi.WifiManager$WifiLock: boolean mHeld>
<android.net.wifi.WifiManager$WifiLock: boolean mRefCounted>
<android.net.wifi.WifiManager$WifiLock: int mLockType>
<android.net.wifi.WifiManager$WifiLock: int mRefCount>
<android.net.wifi.WifiManager$WifiLock: java.lang.String mTag>
<android.net.wifi.WifiManager: android.net.wifi.IWifiManager mService>
<android.net.wifi.WifiManager: int mActiveLockCount>
<android.os.AsyncResult: java.lang.Object result>
<android.os.AsyncTask$1: java.util.concurrent.atomic.AtomicInteger mCount>
<android.os.AsyncTask$Status: android.os.AsyncTask$Status FINISHED>
<android.os.AsyncTask: java.util.concurrent.BlockingQueue sWorkQueue>
<android.os.AsyncTask: java.util.concurrent.ThreadFactory sThreadFactory>
<android.os.BatteryStats$HistoryItem: byte batteryHealth>
<android.os.BatteryStats$HistoryItem: byte batteryPlugType>
<android.os.BatteryStats$HistoryItem: char batteryTemperature>
<android.os.BatteryStats$Uid$Pid: long mWakeSum>
<android.os.BatteryStats$Uid$Pkg$Serv: android.os.BatteryStats$Uid$Pkg this$0>
<android.os.BatteryStats: android.os.BatteryStats$BitDescription[] HISTORY_STATE_DESCRIPTIONS>
<android.os.BatteryStats: java.lang.StringBuilder mFormatBuilder>
<android.os.BatteryStats: java.util.Formatter mFormatter>
<android.os.Broadcaster: android.os.Broadcaster$Registration mReg>
<android.os.Build$VERSION: java.lang.String CODENAME>
<android.os.Build: java.lang.String BOOTLOADER>
<android.os.Build: java.lang.String DISPLAY>
<android.os.Build: java.lang.String FINGERPRINT>
<android.os.Build: java.lang.String MODEL>
<android.os.Build: java.lang.String PRODUCT>
<android.os.Build: java.lang.String TYPE>
<android.os.Build: java.lang.String USER>
<android.os.Build: long TIME>
<android.os.Bundle: android.os.Parcel mParcelledData>
<android.os.Bundle: boolean mHasFds>
<android.os.Bundle: java.util.Map mMap>
<android.os.CountDownTimer$1: android.os.CountDownTimer this$0>
<android.os.Debug$MemoryInfo: int otherSharedDirty>
<android.os.DropBoxManager$Entry: android.os.ParcelFileDescriptor mFileDescriptor>
<android.os.DropBoxManager$Entry: android.os.Parcelable$Creator CREATOR>
<android.os.DropBoxManager$Entry: byte[] mData>
<android.os.DropBoxManager$Entry: long mTimeMillis>
<android.os.DropBoxManager: com.android.internal.os.IDropBoxManagerService mService>
<android.os.Environment: java.lang.String DIRECTORY_MUSIC>
<android.os.Environment: java.lang.String DIRECTORY_NOTIFICATIONS>
<android.os.FileObserver$ObserverThread: int m_fd>
<android.os.FileObserver$ObserverThread: java.util.HashMap m_observers>
<android.os.FileUtils: java.util.regex.Pattern SAFE_FILENAME_PATTERN>
<android.os.Handler$MessengerImpl: android.os.Handler this$0>
<android.os.Handler: android.os.Handler$Callback mCallback>
<android.os.Handler: android.os.IMessenger mMessenger>
<android.os.Handler: android.os.Looper mLooper>
<android.os.Handler: android.os.MessageQueue mQueue>
<android.os.HandlerThread: android.os.Looper mLooper>
<android.os.HandlerThread: int mPriority>
<android.os.HandlerThread: int mTid>
<android.os.IHardwareService$Stub$Proxy: android.os.IBinder mRemote>
<android.os.IPermissionController$Stub$Proxy: android.os.IBinder mRemote>
<android.os.IPowerManager$Stub$Proxy: android.os.IBinder mRemote>
<android.os.IRemoteCallback$Stub$Proxy: android.os.IBinder mRemote>
<android.os.IVibratorService$Stub$Proxy: android.os.IBinder mRemote>
<android.os.LatencyTimer: java.lang.String TAG>
<android.os.Looper: android.os.MessageQueue mQueue>
<android.os.Looper: android.util.Printer mLogging>
<android.os.Looper: boolean mRun>
<android.os.Looper: java.lang.Thread mThread>
<android.os.MemoryFile$MemoryInputStream: int mOffset>
<android.os.MemoryFile$MemoryOutputStream: byte[] mSingleByte>
<android.os.MemoryFile: boolean mOwnsRegion>
<android.os.Message: android.os.Bundle data>
<android.os.Message: android.os.Handler target>
<android.os.Message: android.os.Message mPool>
<android.os.Message: android.os.Message next>
<android.os.Message: android.os.Messenger replyTo>
<android.os.Message: int arg1>
<android.os.Message: int arg2>
<android.os.Message: int what>
<android.os.Message: java.lang.Object mPoolSync>
<android.os.Message: java.lang.Object obj>
<android.os.Message: java.lang.Runnable callback>
<android.os.Message: long when>
<android.os.MessageQueue: android.os.Message mMessages>
<android.os.MessageQueue: boolean mBlocked>
<android.os.MessageQueue: boolean mQuiting>
<android.os.MessageQueue: int mPtr>
<android.os.Messenger: android.os.IMessenger mTarget>
<android.os.Messenger: android.os.Parcelable$Creator CREATOR>
<android.os.ParcelUuid: android.os.Parcelable$Creator CREATOR>
<android.os.ParcelUuid: java.util.UUID mUuid>
<android.os.PatternMatcher: int mType>
<android.os.PatternMatcher: java.lang.String mPattern>
<android.os.PowerManager$WakeLock: android.os.IBinder mToken>
<android.os.PowerManager$WakeLock: android.os.PowerManager this$0>
<android.os.PowerManager$WakeLock: android.os.WorkSource mWorkSource>
<android.os.PowerManager$WakeLock: boolean mHeld>
<android.os.PowerManager$WakeLock: boolean mRefCounted>
<android.os.PowerManager$WakeLock: int mCount>
<android.os.PowerManager$WakeLock: int mFlags>
<android.os.PowerManager$WakeLock: java.lang.Runnable mReleaser>
<android.os.PowerManager$WakeLock: java.lang.String mTag>
<android.os.PowerManager: android.os.IPowerManager mService>
<android.os.Process$1: java.lang.String val$processClass>
<android.os.Process: android.net.LocalSocket sZygoteSocket>
<android.os.Process: boolean sPreviousZygoteOpenFailed>
<android.os.RecoverySystem$1: android.os.ConditionVariable val$condition>
<android.os.RecoverySystem: int LOG_FILE_MAX_LENGTH>
<android.os.RecoverySystem: java.io.File COMMAND_FILE>
<android.os.RecoverySystem: java.io.File LOG_FILE>
<android.os.RecoverySystem: java.io.File RECOVERY_DIR>
<android.os.RecoverySystem: java.lang.String LAST_LOG_FILENAME>
<android.os.Registrant: java.lang.Object userObj>
<android.os.RemoteCallback$DeliverResult: android.os.Bundle mResult>
<android.os.RemoteCallback$DeliverResult: android.os.RemoteCallback this$0>
<android.os.RemoteCallback: android.os.IRemoteCallback mTarget>
<android.os.RemoteCallbackList$Callback: android.os.RemoteCallbackList this$0>
<android.os.RemoteCallbackList: boolean mKilled>
<android.os.RemoteCallbackList: java.lang.Object[] mActiveBroadcast>
<android.os.ResultReceiver$MyResultReceiver: android.os.ResultReceiver this$0>
<android.os.StrictMode$AndroidBlockGuardPolicy$1: java.util.ArrayList val$records>
<android.os.StrictMode$ViolationInfo: android.app.ApplicationErrorReport$CrashInfo crashInfo>
<android.os.StrictMode$ViolationInfo: int policy>
<android.os.StrictMode$ViolationInfo: int violationNumThisLoop>
<android.os.StrictMode$ViolationInfo: long violationUptimeMillis>
<android.os.StrictMode$VmPolicy: int mask>
<android.os.StrictMode: int sVmPolicyMask>
<android.os.StrictMode: java.lang.ThreadLocal gatheredViolations>
<android.os.TokenWatcher: java.lang.Runnable mNotificationTask>
<android.os.TokenWatcher: java.util.WeakHashMap mTokens>
<android.os.UEventObserver$UEventThread: java.util.ArrayList mObservers>
<android.os.UEventObserver: android.os.UEventObserver$UEventThread sThread>
<android.os.Vibrator: android.os.Binder mToken>
<android.os.storage.StorageManager$ListenerDelegate: android.os.Handler mHandler>
<android.os.storage.StorageManager$ListenerDelegate: android.os.storage.StorageManager this$0>
<android.os.storage.StorageManager$ObbStateChangedStorageEvent: int state>
<android.os.storage.StorageManager: java.util.List mListeners>
<android.provider.Settings$NameValueCache: java.lang.String mVersionSystemProperty>
<android.provider.Settings$NameValueCache: java.util.HashMap mValues>
<android.provider.Settings$NameValueCache: long mValuesVersion>
<android.provider.Settings$System: android.provider.Settings$NameValueCache sNameValueCache>
<android.text.BoringLayout: int mBottom>
<android.text.BoringLayout: int mDesc>
<android.text.BoringLayout: java.lang.String mDirect>
<android.text.DynamicLayout: android.text.PackedIntVector mInts>
<android.text.DynamicLayout: android.text.PackedObjectVector mObjects>
<android.text.DynamicLayout: android.text.StaticLayout sStaticLayout>
<android.text.Layout: android.text.Layout$Alignment mAlignment>
<android.text.Layout: android.text.TextPaint mPaint>
<android.text.Layout: android.text.TextPaint mWorkPaint>
<android.text.Layout: boolean mSpannedText>
<android.text.Layout: int mWidth>
<android.text.Layout: java.lang.CharSequence mText>
<android.text.PackedIntVector: int mColumns>
<android.text.PackedIntVector: int mRowGapLength>
<android.text.PackedIntVector: int mRowGapStart>
<android.text.PackedIntVector: int mRows>
<android.text.PackedIntVector: int[] mValueGap>
<android.text.PackedIntVector: int[] mValues>
<android.text.PackedObjectVector: int mColumns>
<android.text.PackedObjectVector: int mRowGapStart>
<android.text.PackedObjectVector: java.lang.Object[] mValues>
<android.text.SpannableStringBuilder: char[] mText>
<android.text.SpannableStringBuilder: int mGapLength>
<android.text.SpannableStringBuilder: int mGapStart>
<android.text.SpannableStringBuilder: int mSpanCount>
<android.text.SpannableStringBuilder: int[] mSpanEnds>
<android.text.SpannableStringBuilder: int[] mSpanFlags>
<android.text.SpannableStringBuilder: int[] mSpanStarts>
<android.text.SpannableStringBuilder: java.lang.Object[] mSpans>
<android.text.StaticLayout: byte[] mChdirs>
<android.text.StaticLayout: char[] mChs>
<android.text.StaticLayout: float[] mWidths>
<android.text.TextPaint: float density>
<android.text.TextPaint: int linkColor>
<android.text.TextPaint: int[] drawableState>
<android.text.TextUtils: char[] sTemp>
<android.text.method.ArrowKeyMovementMethod: android.text.method.ArrowKeyMovementMethod sInstance>
<android.text.method.SingleLineTransformationMethod: android.text.method.SingleLineTransformationMethod sInstance>
<android.util.FinitePool: android.util.Poolable mRoot>
<android.util.FinitePool: int mPoolCount>
<android.util.LongSparseArray: int mSize>
<android.util.SparseArray: int mSize>
<android.view.ContextThemeWrapper: android.content.Context mBase>
<android.view.ContextThemeWrapper: android.content.res.Resources$Theme mTheme>
<android.view.FocusFinder: android.graphics.Rect mBestCandidateRect>
<android.view.FocusFinder: android.graphics.Rect mFocusedRect>
<android.view.InputQueue$FinishedCallback: android.view.InputQueue$FinishedCallback sRecycleHead>
<android.view.InputQueue$FinishedCallback: int sRecycleCount>
<android.view.InputQueue$FinishedCallback: long mFinishedToken>
<android.view.LayoutInflater: android.content.Context mContext>
<android.view.LayoutInflater: java.lang.Object[] mConstructorArgs>
<android.view.MotionEvent: android.view.MotionEvent gRecyclerTop>
<android.view.MotionEvent: boolean mRecycled>
<android.view.MotionEvent: float mXOffset>
<android.view.MotionEvent: float mYOffset>
<android.view.MotionEvent: int gRecyclerUsed>
<android.view.MotionEvent: int mAction>
<android.view.VelocityTracker$Pointer: android.view.VelocityTracker$Pointer next>
<android.view.VelocityTracker$Pointer: float[] pastX>
<android.view.VelocityTracker$Pointer: float[] pastY>
<android.view.VelocityTracker$Pointer: long[] pastTime>
<android.view.VelocityTracker: android.view.VelocityTracker mNext>
<android.view.VelocityTracker: android.view.VelocityTracker$Pointer mPointerListHead>
<android.view.VelocityTracker: android.view.VelocityTracker$Pointer sRecycledPointerListHead>
<android.view.VelocityTracker: int mGeneration>
<android.view.VelocityTracker: int mLastTouchIndex>
<android.view.VelocityTracker: int sRecycledPointerCount>
<android.view.View$AttachInfo: android.graphics.Rect mContentInsets>
<android.view.View$AttachInfo: android.graphics.Rect mTmpInvalRect>
<android.view.View$AttachInfo: android.graphics.Rect mVisibleInsets>
<android.view.View$AttachInfo: android.os.Handler mHandler>
<android.view.View$AttachInfo: android.os.IBinder mWindowToken>
<android.view.View$AttachInfo: android.view.View$AttachInfo$Callbacks mRootCallbacks>
<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>
<android.view.View$AttachInfo: boolean mHasWindowFocus>
<android.view.View$AttachInfo: boolean mInTouchMode>
<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes>
<android.view.View$AttachInfo: boolean mScalingRequired>
<android.view.View$AttachInfo: boolean mViewVisibilityChanged>
<android.view.View$AttachInfo: float mApplicationScale>
<android.view.View$AttachInfo: int mWindowVisibility>
<android.view.View$AttachInfo: int[] mInvalidateChildLocation>
<android.view.View$AttachInfo: java.util.ArrayList mScrollContainers>
<android.view.View$PerformClick: android.view.View this$0>
<android.view.View$UnsetPressedState: android.view.View this$0>
<android.view.View: android.content.Context mContext>
<android.view.View: android.graphics.drawable.Drawable mBGDrawable>
<android.view.View: android.view.TouchDelegate mTouchDelegate>
<android.view.View: android.view.View$AttachInfo mAttachInfo>
<android.view.View: android.view.View$CheckForTap mPendingCheckForTap>
<android.view.View: android.view.View$OnClickListener mOnClickListener>
<android.view.View: android.view.View$PerformClick mPerformClick>
<android.view.View: android.view.View$UnsetPressedState mUnsetPressedState>
<android.view.View: android.view.ViewParent mParent>
<android.view.View: android.view.animation.Animation mCurrentAnimation>
<android.view.View: boolean mBackgroundSizeChanged>
<android.view.View: int mBottom>
<android.view.View: int mLeft>
<android.view.View: int mMeasuredHeight>
<android.view.View: int mPaddingBottom>
<android.view.View: int mPaddingLeft>
<android.view.View: int mPaddingRight>
<android.view.View: int mPaddingTop>
<android.view.View: int mPrivateFlags>
<android.view.View: int mRight>
<android.view.View: int mTop>
<android.view.View: int mViewFlags>
<android.view.View: int[] mDrawableState>
<android.view.ViewGroup: android.graphics.Rect mTempRect>
<android.view.ViewGroup: android.view.View mMotionTarget>
<android.view.ViewGroup: android.view.View[] mChildren>
<android.view.ViewGroup: int mChildrenCount>
<android.view.ViewGroup: int mGroupFlags>
<android.view.ViewRoot$1: android.view.ViewRoot this$0>
<android.view.ViewRoot$W: java.lang.ref.WeakReference mViewRoot>
<android.view.ViewRoot: android.content.res.CompatibilityInfo$Translator mTranslator>
<android.view.ViewRoot: android.graphics.Rect mDirty>
<android.view.ViewRoot: android.graphics.Rect mWinFrame>
<android.view.ViewRoot: android.media.AudioManager mAudioManager>
<android.view.ViewRoot: android.view.InputChannel mInputChannel>
<android.view.ViewRoot: android.view.InputQueue$Callback mInputQueueCallback>
<android.view.ViewRoot: android.view.Surface mSurface>
<android.view.ViewRoot: android.view.View mView>
<android.view.ViewRoot: android.view.View$AttachInfo mAttachInfo>
<android.view.ViewRoot: android.view.ViewConfiguration mViewConfiguration>
<android.view.ViewRoot: android.view.ViewRoot$W mWindow>
<android.view.ViewRoot: android.view.WindowManager$LayoutParams mWindowAttributes>
<android.view.ViewRoot: boolean mAdded>
<android.view.ViewRoot: boolean mAppVisible>
<android.view.ViewRoot: boolean mFirst>
<android.view.ViewRoot: boolean mFullRedrawNeeded>
<android.view.ViewRoot: boolean mLastWasImTarget>
<android.view.ViewRoot: boolean mLayoutRequested>
<android.view.ViewRoot: boolean mNewSurfaceNeeded>
<android.view.ViewRoot: boolean mProfile>
<android.view.ViewRoot: boolean mReportNextDraw>
<android.view.ViewRoot: boolean mTraversalScheduled>
<android.view.ViewRoot: boolean mWillDrawSoon>
<android.view.ViewRoot: boolean mWindowAttributesChanged>
<android.view.ViewRoot: int mAddNesting>
<android.view.ViewRoot: int mDensity>
<android.view.ViewRoot: int mHeight>
<android.view.ViewRoot: int mViewVisibility>
<android.view.ViewRoot: int mWidth>
<android.view.ViewRoot: java.lang.Runnable mFinishedCallback>
<android.view.ViewRoot: java.lang.Thread mThread>
<android.view.ViewTreeObserver: boolean mAlive>
<android.view.ViewTreeObserver: java.util.concurrent.CopyOnWriteArrayList mOnPreDrawListeners>
<android.view.ViewTreeObserver: java.util.concurrent.CopyOnWriteArrayList mOnTouchModeChangeListeners>
<android.view.Window: android.view.Window$Callback mCallback>
<android.view.Window: android.view.WindowManager mWindowManager>
<android.view.WindowManager$LayoutParams: int flags>
<android.view.WindowManagerImpl: android.view.ViewRoot[] mRoots>
<android.view.WindowManagerImpl: android.view.View[] mViews>
<android.view.WindowManagerImpl: android.view.WindowManager$LayoutParams[] mParams>
<android.view.inputmethod.BaseInputConnection: android.text.Editable mEditable>
<android.view.inputmethod.BaseInputConnection: boolean mDummyMode>
<android.view.inputmethod.InputMethodManager: android.view.View mNextServedView>
<android.view.inputmethod.InputMethodManager: android.view.View mServedView>
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.EditorInfo mCurrentTextBoxAttribute>
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputConnection mServedInputConnection>
<android.view.inputmethod.InputMethodManager: boolean mNextServedNeedsStart>
<android.widget.EdgeGlow: int mState>
<android.widget.OverScroller$MagneticOverScroller: boolean mFinished>
<android.widget.OverScroller: android.widget.OverScroller$MagneticOverScroller mScrollerX>
<android.widget.OverScroller: android.widget.OverScroller$MagneticOverScroller mScrollerY>
<android.widget.ScrollView: android.view.VelocityTracker mVelocityTracker>
<android.widget.ScrollView: android.widget.EdgeGlow mEdgeGlowBottom>
<android.widget.ScrollView: android.widget.EdgeGlow mEdgeGlowTop>
<android.widget.ScrollView: android.widget.OverScroller mScroller>
<android.widget.ScrollView: int mMaximumVelocity>
<android.widget.ScrollView: int mMinimumVelocity>
<android.widget.TextView$ChangeWatcher: android.widget.TextView this$0>
<android.widget.TextView$HandleView: android.widget.PopupWindow mContainer>
<android.widget.TextView$InsertionPointCursorController: android.widget.TextView this$0>
<android.widget.TextView$InsertionPointCursorController: android.widget.TextView$HandleView mHandle>
<android.widget.TextView$InsertionPointCursorController: java.lang.Runnable mHider>
<android.widget.TextView$SelectionModifierCursorController: android.widget.TextView this$0>
<android.widget.TextView$SelectionModifierCursorController: android.widget.TextView$HandleView mEndHandle>
<android.widget.TextView$SelectionModifierCursorController: android.widget.TextView$HandleView mStartHandle>
<android.widget.TextView: android.content.res.ColorStateList mHintTextColor>
<android.widget.TextView: android.content.res.ColorStateList mLinkTextColor>
<android.widget.TextView: android.content.res.ColorStateList mTextColor>
<android.widget.TextView: android.graphics.Paint mHighlightPaint>
<android.widget.TextView: android.text.Layout mHintLayout>
<android.widget.TextView: android.text.Layout mLayout>
<android.widget.TextView: android.text.TextPaint mTextPaint>
<android.widget.TextView: android.text.TextUtils$TruncateAt mEllipsize>
<android.widget.TextView: android.text.method.MovementMethod mMovement>
<android.widget.TextView: android.widget.Scroller mScroller>
<android.widget.TextView: android.widget.TextView$CursorController mInsertionPointCursorController>
<android.widget.TextView: android.widget.TextView$CursorController mSelectionModifierCursorController>
<android.widget.TextView: android.widget.TextView$InputMethodState mInputMethodState>
<android.widget.TextView: boolean mEatTouchRelease>
<android.widget.TextView: boolean mInsertionControllerEnabled>
<android.widget.TextView: boolean mSelectionControllerEnabled>
<android.widget.TextView: int mCurHintTextColor>
<android.widget.TextView: int mCurTextColor>
<android.widget.TextView: int mGravity>
<android.widget.TextView: int mInputType>
<android.widget.TextView: int mMaxMode>
<android.widget.TextView: int mMaximum>
<android.widget.TextView: int mPreDrawState>
<android.widget.TextView: int mTextSelectHandleLeftRes>
<android.widget.TextView: int mTextSelectHandleRes>
<android.widget.TextView: int mTextSelectHandleRightRes>
<android.widget.TextView: java.lang.CharSequence mText>
<android.widget.Toast: android.app.INotificationManager sService>
